<?php

declare(strict_types=1);

/*
 * (c) 2022 Michael Joyce <mjoyce@sfu.ca>
 * This source file is subject to the GPL v2, bundled
 * with this source code in the file LICENSE.
 */

namespace App\Repository;

use App\Entity\Publication;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * PublicationRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PublicationRepository extends ServiceEntityRepository {
    public function __construct(ManagerRegistry $registry, $entityClass = null) {
        parent::__construct($registry, $entityClass ?? Publication::class);
    }

    public function letterPage($letter, $category, $pageSize) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('count(1)');
        $qb->from(Publication::class, 'p');
        $qb->where('p INSTANCE OF :category');
        $qb->setParameter('category', $category);
        $qb->andWhere('p.sortableTitle < :letter');
        $qb->setParameter('letter', $letter);
        $count = $qb->getQuery()->getSingleScalarResult();

        return ceil($count / $pageSize);
    }

    public function next(Publication $publication) {
        $qb = $this->createQueryBuilder('e');
        $qb->andWhere('e.sortableTitle > :q');
        $qb->setParameter('q', $publication->getSortableTitle());
        $qb->andWhere('e INSTANCE OF :i');
        $qb->setParameter('i', $publication->getCategory());
        $qb->addOrderBy('e.sortableTitle', 'ASC');
        $qb->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function previous(Publication $publication) {
        $qb = $this->createQueryBuilder('e');
        $qb->andWhere('e.sortableTitle < :q');
        $qb->setParameter('q', $publication->getSortableTitle());
        $qb->andWhere('e INSTANCE OF :i');
        $qb->setParameter('i', $publication->getCategory());
        $qb->addOrderBy('e.sortableTitle', 'DESC');
        $qb->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function searchQuery($q) {
        $qb = $this->createQueryBuilder('e');
        $qb->andWhere('MATCH (e.title) AGAINST (:q BOOLEAN) > 0.0');
        $qb->setParameter('q', $q);

        return $qb->getQuery();
    }
}
